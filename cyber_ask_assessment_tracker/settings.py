"""
Django settings for cyber_ask_assessment_tracker project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
print("--- DEBUG: settings.py execution started ---")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%w&4&8q0+n-7qr^vmwfv58580f2s7rhinj1ymm(_j)gv$6*rzs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'tracker.apps.TrackerConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'constance',
    'constance.backends.database',
    'django_celery_results',

]

print(f"--- DEBUG: Value of INSTALLED_APPS (in settings.py): {INSTALLED_APPS}")
print(f"--- DEBUG: Is 'tracker.apps.TrackerConfig' in INSTALLED_APPS? {'tracker.apps.TrackerConfig' in INSTALLED_APPS} ---")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cyber_ask_assessment_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cyber_ask_assessment_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/' # Or a specific dashboard URL later
LOGOUT_REDIRECT_URL = '/accounts/login/' # Redirect back to login page
LOGIN_URL = '/accounts/login/'

import os # Make sure os is imported at the top

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

COMPANIES_HOUSE_API_KEY = '70a9e104-b7cd-45c2-8292-0773ae537430'

TENABLE_CLIENT_TAG_CATEGORY = 'Client'
TENABLE_DOWNLOADS_URL = 'https://www.tenable.com/downloads/nessus-agents'
TENABLE_AGENT_DOWNLOADS_PAGE_URL = 'https://www.tenable.com/downloads/nessus-agents'
# --- END ADD ---

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_CONFIG = {
    'TENABLE_ACCESS_KEY': ('1b328bd0d6706bef7c3ce087d6c16e8e17c19f59d703e968d8d193605e5aeb3a', 'Tenable.io Access Key', str),
    'TENABLE_SECRET_KEY': ('08b8b578b50c61e5aaca26e5205eefcceacc78a335a4698fa38ebd59f35c8c56', 'Tenable.io Secret Key', str),
    'TENABLE_LINKING_KEY': ('87f948be386683b2fa17e960af85e24a683d9142a2ef53c97c8919b54747e777', 'Nessus Agent Linking Key (--key)', str),
    'TENABLE_CLIENT_TAG_CATEGORY' : ('AssessmentPlatformClients','Tenable.io Client Tag Category', str),
    'TENABLE_SCAN_POLICY_UUID': ('2e7d8b44-7b38-733c-2ff3-15cc4956d494f632d534fffed23c', 'UUID of the Tenable Scan Policy/Template to use for agent scans', str),
    'TENABLE_SCAN_POLICY_ID': ('71','ID of the Tenable SCan Policy/Template to use for agent scans', int),
    'TENABLE_SCANNER_UUID': ('2e7d8b44-7b38-733c-2ff3-15cc4956d494f632d534fffed23c', 'UUID of the Tenable Scanner/Group to use (Default is Cloud Scanner)', str),
    'TENABLE_DEFAULT_POLICY_ID': (71, 'Default Tenable Policy ID for CE+ Scans', int),
    'TENABLE_DEFAULT_SCANNER_UUID': ('2e7d8b44-7b38-733c-2ff3-15cc4956d494f632d534fffed23c','Default Tenable Scanner UUID for CE+ Scans (e.g., Cloud Scanner)', str),
    # CHANGES END
    # Add Tenable API URL if not default cloud.tenable.com
     'TENABLE_URL': ('https://cloud.tenable.com', 'Tenable Instance URL', str)
}
# Optional: Hide sensitive keys slightly in admin
CONSTANCE_CONFIG_FIELDSETS = {
    'Tenable API Settings': ('TENABLE_URL', 'TENABLE_ACCESS_KEY', 'TENABLE_SECRET_KEY', 'TENABLE_LINKING_KEY',
                             "TENABLE_CLIENT_TAG_CATEGORY",'TENABLE_SCAN_POLICY_UUID',
        'TENABLE_SCANNER_UUID', "TENABLE_SCAN_POLICY_ID","TENABLE_DEFAULT_POLICY_ID",'TENABLE_DEFAULT_SCANNER_UUID',),
}




LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep existing loggers (like Django's own) active
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'db_formatter': { # Formatter for our database log handler
            'format': '%(levelname)s %(asctime)s %(module)s %(funcName)s L%(lineno)d: %(message)s',
            # Includes standard log record attributes that our handler and model expect.
        }
    },
    'handlers': {
        'console': { # Example: Default console handler, you might already have this
            'level': 'INFO', # Or 'DEBUG' if DEBUG is True
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'db_critical_errors': { # Define our custom database handler
            'level': 'CRITICAL', # Only capture CRITICAL level messages (or ERROR and above if preferred)
            'class': 'tracker.logging_handlers.DatabaseLogHandler', # Path to your custom handler class
            'formatter': 'db_formatter', # Use the specific formatter
        },
        # You might have other handlers like 'mail_admins' for errors
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        'django': { # Django's own logger
            'handlers': ['console'], # Add 'mail_admins' here if you want Django errors emailed
            'level': 'INFO', # Adjust as needed
            'propagate': False, # Don't pass to root logger if handled here
        },
        'tracker': { # Your app's logger
            'handlers': ['console', 'db_critical_errors'], # Add db_critical_errors here
            'level': 'DEBUG', # Capture DEBUG and above for your app
            'propagate': True, # Allow propagation to root logger if needed
        },
        # You can configure other app loggers here, e.g., 'celery'
        # 'celery': {
        #     'handlers': ['console', 'db_critical_errors'], # Log celery criticals to DB too
        #     'level': 'INFO',
        #     'propagate': True,
        # },
        # Add other third-party app loggers if needed
    },
    'root': { # Root logger: catches everything not caught by specific app loggers if propagate=True
        'handlers': ['console', 'db_critical_errors'], # Add db_critical_errors to root
        'level': 'WARNING', # Example: Root logger captures WARNING and above
        # Set a higher level for root if app loggers are more specific,
        # or set it to DEBUG and control verbosity with handler levels.
    }
}





CELERY_BROKER_URL = 'redis://10.0.0.131:30036/0'
CELERY_RESULT_BACKEND = 'django-db'
# OR use Redis as backend: CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/London' # Set to your timezone

# django-celery-results configuration (if using 'django-db' backend)
CELERY_RESULT_EXTENDED = True # Optional: Provides more task metadata


from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'scrape-nessus-urls-daily': {
        'task': 'tracker.tasks.scrape_nessus_agent_urls',
        # Run daily at 3:05 AM (adjust time as needed)
        'schedule': crontab(hour=3, minute=5),
    },
     'validate-nessus-urls-daily': {
        'task': 'tracker.tasks.validate_agent_urls',
         # Run daily at 4:05 AM (after scraping)
        'schedule': crontab(hour=4, minute=5),
    },
     # ... other scheduled tasks ...
}

import os
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

