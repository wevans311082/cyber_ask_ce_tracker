# Generated by Django 5.2 on 2025-05-25 19:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0043_assessmentpersonnel'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonnelSecurityTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('EmailAttachment', 'Email Attachment Test'), ('EmailLink', 'Email Link Test'), ('BrowserWebsite', 'Browser Website Test'), ('USBDevice', 'USB Device Test'), ('Other', 'Other Security Test')], max_length=20, verbose_name='Type of Security Test')),
                ('test_description', models.CharField(blank=True, help_text="e.g., 'EICAR test file in ZIP via email', 'Link to malicious_site.example.com'", max_length=255, verbose_name='Test Description/Scenario')),
                ('test_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Date and Time of Test')),
                ('outcome', models.CharField(choices=[('BlockedBySystem', 'Malware/Link Blocked by System'), ('NotBlockedExecuted', 'Malware/Link Not Blocked - Executed/Opened'), ('NotBlockedNotExecuted', 'Malware/Link Not Blocked - Not Executed/Opened by User'), ('ReportedByUser', 'Malware/Link Reported by User'), ('PassedNoAction', 'Test Passed - No Adverse Action Possible/Taken'), ('FailedOther', 'Test Failed - Other'), ('InProgress', 'Test In Progress')], max_length=30, verbose_name='Outcome of Test')),
                ('malware_sample_name', models.CharField(blank=True, help_text='Identifier for the malware sample used, if any (e.g., EICAR, specific test file name).', max_length=100, verbose_name='Malware Sample Name/ID')),
                ('notes', models.TextField(blank=True, help_text='Detailed observations, user actions, system responses, etc.', verbose_name='Observations and Notes')),
                ('date_recorded', models.DateTimeField(auto_now_add=True, verbose_name='Date Recorded')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('assessment_personnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_tests', to='tracker.assessmentpersonnel', verbose_name='Personnel Tested')),
                ('evidence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_test_evidence', to='tracker.evidence', verbose_name='Supporting Evidence (Optional)')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_security_tests', to=settings.AUTH_USER_MODEL, verbose_name='Recorded By (Platform User)')),
                ('scoped_item', models.ForeignKey(blank=True, help_text='Link to the specific device in scope, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_tests', to='tracker.scopeditem', verbose_name='Device Tested (Optional)')),
            ],
            options={
                'verbose_name': 'Personnel Security Test Log',
                'verbose_name_plural': 'Personnel Security Test Logs',
                'ordering': ['assessment_personnel', '-test_date', '-date_recorded'],
            },
        ),
        migrations.CreateModel(
            name='PersonnelCloudServiceAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_level', models.CharField(blank=True, help_text="e.g., Administrator, Standard User, Read-only, Custom. Describe the user's permissions.", max_length=100, verbose_name='Access Level / Role')),
                ('is_admin_access', models.BooleanField(default=False, help_text='Tick if this person has administrative privileges on this cloud service.', verbose_name='Has Administrative Access')),
                ('mfa_enabled_for_personnel', models.BooleanField(blank=True, default=None, help_text='Is Multi-Factor Authentication confirmed as enabled for this specific person on this service?', null=True, verbose_name='MFA Enabled for this Personnel')),
                ('notes', models.TextField(blank=True, help_text='Details about how access was verified, specific permissions, or MFA status for this person.', verbose_name='Verification Notes / Details')),
                ('date_recorded', models.DateTimeField(auto_now_add=True, verbose_name='Date Recorded')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('assessment_cloud_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personnel_accesses', to='tracker.assessmentcloudservice', verbose_name='Assessment Cloud Service')),
                ('personnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cloud_service_accesses', to='tracker.assessmentpersonnel', verbose_name='Personnel Contact')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_cloud_accesses', to=settings.AUTH_USER_MODEL, verbose_name='Recorded By (Platform User)')),
            ],
            options={
                'verbose_name': 'Personnel Cloud Service Access',
                'verbose_name_plural': 'Personnel Cloud Service Accesses',
                'ordering': ['personnel', 'assessment_cloud_service'],
                'unique_together': {('personnel', 'assessment_cloud_service')},
            },
        ),
    ]
