# Generated by Django 5.2 on 2025-05-16 21:15

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0034_tenablescanresultsummary'),
    ]

    operations = [
        migrations.CreateModel(
            name='TenableVulnerabilityFinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tenable_asset_uuid', models.UUIDField(blank=True, db_index=True, help_text="Tenable's UUID for the asset associated with this finding.", null=True)),
                ('tenable_plugin_output_hash', models.CharField(blank=True, db_index=True, help_text="A hash of key plugin output details to help identify unique instances if a specific finding UUID isn't available.", max_length=64, null=True)),
                ('plugin_id', models.IntegerField(db_index=True, help_text='Tenable Plugin ID for the vulnerability.')),
                ('plugin_name', models.CharField(help_text='Name of the vulnerability plugin.', max_length=512)),
                ('plugin_family', models.CharField(blank=True, help_text='Family or category of the plugin.', max_length=255, null=True)),
                ('severity', models.IntegerField(choices=[(0, 'Informational'), (1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], db_index=True, default=0, help_text='Severity of the vulnerability.')),
                ('ip_address', models.GenericIPAddressField(blank=True, db_index=True, help_text='IP address where the vulnerability was found.', null=True)),
                ('fqdn', models.CharField(blank=True, help_text='FQDN of the asset, if available.', max_length=255, null=True)),
                ('netbios_name', models.CharField(blank=True, help_text='NetBIOS name of the asset, if available.', max_length=255, null=True)),
                ('mac_address', models.CharField(blank=True, help_text='MAC address of the asset, if available.', max_length=17, null=True)),
                ('port', models.IntegerField(blank=True, help_text='Port number the vulnerability was found on.', null=True)),
                ('protocol', models.CharField(blank=True, help_text='Protocol (e.g., TCP, UDP).', max_length=10, null=True)),
                ('service_name', models.CharField(blank=True, help_text='Service name running on the port.', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the vulnerability.', null=True)),
                ('solution', models.TextField(blank=True, help_text='Recommended solution or remediation steps.', null=True)),
                ('see_also', models.TextField(blank=True, help_text='URLs or references for more information (can be newline separated).', null=True)),
                ('plugin_output', models.TextField(blank=True, help_text='Specific output from the plugin for this finding instance, can be extensive.', null=True)),
                ('cvss3_base_score', models.FloatField(blank=True, help_text='CVSSv3 base score.', null=True)),
                ('cvss3_vector', models.CharField(blank=True, help_text='CVSSv3 vector string.', max_length=100, null=True)),
                ('cve_ids', models.JSONField(blank=True, default=list, help_text='List of CVE IDs associated with this vulnerability.', null=True)),
                ('exploit_available', models.BooleanField(default=False, help_text='Is an exploit publicly available for this vulnerability?')),
                ('exploitability_ease', models.CharField(blank=True, help_text="Information about ease of exploit (e.g., 'High', 'Functional').", max_length=255, null=True)),
                ('exploited_by_malware', models.BooleanField(default=False, help_text='Is this vulnerability known to be exploited by malware?')),
                ('vulnerability_publication_date', models.DateField(blank=True, help_text='Date the vulnerability was publicly disclosed.', null=True)),
                ('patch_publication_date', models.DateField(blank=True, help_text='Date a patch was made available by the vendor.', null=True)),
                ('first_observed_by_scan', models.DateTimeField(blank=True, help_text='When this finding was first observed by a scan on this asset by our system.', null=True)),
                ('last_observed_by_scan', models.DateTimeField(blank=True, db_index=True, help_text='When this finding was last observed by a scan on this asset by our system.', null=True)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('FIXED', 'Fixed'), ('REOPENED', 'Reopened'), ('RISK_ACCEPTED', 'Risk Accepted')], db_index=True, default='OPEN', help_text='Current status of this vulnerability finding in the tracker.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scan_log', models.ForeignKey(help_text='The scan log entry that reported this finding.', on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='tracker.tenablescanlog')),
                ('scoped_item', models.ForeignKey(blank=True, help_text='The scoped asset this finding pertains to, if matched.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenable_findings', to='tracker.scopeditem')),
            ],
            options={
                'verbose_name': 'Tenable Vulnerability Finding',
                'verbose_name_plural': 'Tenable Vulnerability Findings',
                'ordering': ['-severity', '-last_observed_by_scan', 'plugin_name'],
                'indexes': [models.Index(fields=['status', 'severity', 'scoped_item'], name='tracker_ten_status_d9a3e8_idx'), models.Index(fields=['plugin_id', 'status'], name='tracker_ten_plugin__15d1f8_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('status', 'OPEN')), fields=('scoped_item', 'plugin_id', 'port', 'protocol', 'ip_address'), name='unique_finding_on_asset_port_proto')],
            },
        ),
    ]
